{
  "_from": "ngx-page-scroll",
  "_id": "ngx-page-scroll@6.0.2",
  "_inBundle": false,
  "_integrity": "sha512-FYLOLfbp8l5TY9vOtEhr1KmPMrw/2YAmgzedwJOIsx3F37XRkyIs3oj4r62dkCHAbU//JR3L1A8cUhBs8nz8fg==",
  "_location": "/ngx-page-scroll",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngx-page-scroll",
    "fetchSpec": "latest",
    "name": "ngx-page-scroll",
    "raw": "ngx-page-scroll",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-page-scroll/-/ngx-page-scroll-6.0.2.tgz",
  "_shasum": "9dd1ce9862fd070acd29ffe2a9330e4db0844ab1",
  "_spec": "ngx-page-scroll",
  "_where": "C:\\New folder\\ITProjectSolution\\website_IPS\\ipsweb",
  "author": {
    "email": "sebastian.fuss@googlemail.com",
    "name": "Sebastian Fuss"
  },
  "bugs": {
    "url": "https://github.com/Nolanus/ngx-page-scroll/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "tslib": "^1.9.0"
  },
  "deprecated": false,
  "description": "Convenience directive for animated scrolling functionality for angular written in pure typescript",
  "devDependencies": {},
  "es2015": "fesm2015/ngx-page-scroll.js",
  "esm2015": "esm2015/ngx-page-scroll.js",
  "esm5": "esm5/ngx-page-scroll.js",
  "fesm2015": "fesm2015/ngx-page-scroll.js",
  "fesm5": "fesm5/ngx-page-scroll.js",
  "homepage": "https://github.com/Nolanus/ngx-page-scroll#readme",
  "keywords": [
    "anchor",
    "angular",
    "angularjs",
    "animate",
    "move",
    "page",
    "pagescroll",
    "scroll",
    "scrollto"
  ],
  "license": "MIT",
  "main": "bundles/ngx-page-scroll.umd.js",
  "metadata": "ngx-page-scroll.metadata.json",
  "module": "fesm5/ngx-page-scroll.js",
  "name": "ngx-page-scroll",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^7.1.0 || ^8.0.0",
    "@angular/core": "^7.1.0 || ^8.0.0",
    "ngx-page-scroll-core": "6.0.2"
  },
  "readme": "# ngx-page-scroll [![npm version](https://img.shields.io/npm/v/ngx-page-scroll.svg?style=flat)](https://www.npmjs.com/package/ngx-page-scroll) [![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nAnimated scrolling functionality for angular written in pure typescript with no additional dependencies\n\n[![Build Status](https://travis-ci.org/Nolanus/ngx-page-scroll.svg?branch=master)](https://travis-ci.org/Nolanus/ngx-page-scroll)\n[![Dependencies Status](https://david-dm.org/Nolanus/ngx-page-scroll.svg?path=projects/ngx-page-scroll)](https://david-dm.org/Nolanus/ngx-page-scroll?path=projects/ngx-page-scroll)\n[![devDependencies Status](https://david-dm.org/Nolanus/ngx-page-scroll/dev-status.svg?path=projects/ngx-page-scroll)](https://david-dm.org/Nolanus/ngx-page-scroll?path=projects/ngx-page-scroll&type=dev)\n[![peerDependencies Status](https://david-dm.org/Nolanus/ngx-page-scroll/peer-status.svg?path=projects/ngx-page-scroll)](https://david-dm.org/Nolanus/ngx-page-scroll?path=projects/ngx-page-scroll&type=peer)\n[![Greenkeeper badge](https://badges.greenkeeper.io/Nolanus/ngx-page-scroll.svg)](https://greenkeeper.io/)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/2b93ea8939824803b0807b72a8c2f5a0)](https://www.codacy.com/app/sebastian-fuss/ngx-page-scroll?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Nolanus/ngx-page-scroll&amp;utm_campaign=Badge_Grade)\n\n**Breaking Change**: Starting with v6 this library consists of two modules: `ngx-page-scroll-core` (the service) and `ngx-page-scroll` (the directive). [➡ How to upgrade](https://github.com/Nolanus/ngx-page-scroll/issues/88#issuecomment-456824209)\n\n## Features\n\n- flexible: trigger scroll animations after component load, server response, etc.\n- easy-to-use directive: scroll to an element referenced in the href-attribute \n(`href=\"#mytarget`) just by adding `pageScroll` directive\n- customizable: adjust duration, offset or whether scrolling stops if the user interrupts \n([read more](https://github.com/Nolanus/ngx-page-scroll/wiki/Scroll-Interruption-Interference))\n- use custom easing functions to calculate the scroll position over time\n- works across routes (scrolls to target element as soon as the \nrouting has finished) and in both directions (horizontal/vertical)\n\n## Table of contents\n\n- [Service](#service)\n  - [Setup](#setup)\n  - [Usage](#usage)\n  - [Configuration](#configuration)\n- [Directive](#directive)    \n  - [Setup](#setup-1)\n  - [Usage](#usage-1)\n  - [Directive API](#directive-api)\n  \n## Service\n\n### Setup\n\nFirst you need to install the core npm module:\n```sh\nnpm install ngx-page-scroll-core --save\n```\n\nThen add the `NgxPageScrollModule` to the imports array of your application module:\n\n```typescript\nimport { NgxPageScrollCoreModule } from 'ngx-page-scroll-core';\n\n@NgModule({\n    imports: [\n        /* Other imports here */\n        NgxPageScrollCoreModule\n        ]\n})\nexport class AppModule {\n}\n```\n\n### Usage\n\nUsing the `PageScrollService#scroll` method you may trigger scroll animations. Provide an options object that provides a reference to the document and the scroll target. Additional properties are optional.\n\n```typescript\nimport { DOCUMENT, Inject } from '@angular/common';\nimport { PageScrollService } from 'ngx-page-scroll-core';\n\nexport class MyComponent {\n constructor(private pageScrollService: PageScrollService, @Inject(DOCUMENT) private document: any) {\n }\n   \n ngOnInit(): void {\n  this.pageScrollService.scroll({\n    document: this.document,\n    scrollTarget: '.theEnd',\n  });\n }\n}\n``` \n\nNote: The `scroll()` method is a shorthand from creating a `PageScrollInstance` (an object encapsulating all information \nrelevant for performing a scroll animation) using `PageScrollService#create` and starting it using \nthe `PageScrollService#start` method.\n\n\n### Configuration\n\nWhen importing the `PageScrollCoreModule` one can provide option overrides:\n\n```typescript\nimports: [\n  ...\n  NgxPageScrollCoreModule.forRoot({duration: 2500, easingLogic: ...}),\n]\n```\n\nCheck the [`PageScrollConfig` interface](https://github.com/Nolanus/ngx-page-scroll/blob/master/projects/ngx-page-scroll-core/src/lib/types/page-scroll.config.ts#L3)\nfor possible options and their impact. The default values may be found in the [`defaultPageScrollConfig`](https://github.com/Nolanus/ngx-page-scroll/blob/master/projects/ngx-page-scroll-core/src/lib/provides/config.provider.ts#L6)\nobject.\n\n## Directive\n\nFor ease of use a directive `pageScroll` exists, which allows you to quickly add scroll animations to your angular app by \nadding a property to your existing HTML a-tags. It can also work cross-routes, meaning it will start the scroll animation \nafter the target route has been loaded.\nIt utilizes the ngx-page-scroll-core module for that, thus requires it as a peer dependency.\n\n### Setup\n\nFirst you need to install the directive npm module:\n```sh\nnpm install ngx-page-scroll --save\n```\n\nThen add the `NgxPageScrollModule` to the imports array of your application module:\n\n```typescript\nimport { NgxPageScrollModule } from 'ngx-page-scroll';\n\n@NgModule({\n    imports: [\n        /* Other imports here */\n        NgxPageScrollModule\n        ]\n})\nexport class AppModule {\n}\n```\n\n### Usage \n\nIn your template you may add the `pageScroll` attribute to elements with an `href` attribute pointing towards an id on \nthe same page (e.g. `#theId`). The `onClick` event will be interrupted and the scroll animation starts.\nAlternatively you may set the optional `pageScrollTarget` property to a valid css selector to specify the \ntarget element to scroll to.\n\n```typescript\n\n@Component({\n   ...\n   template: `...\n        <a pageScroll href=\"#awesomePart\">Take me to the awesomeness</a>\n        <!-- Further content here -->\n        <h2 id=\"awesomePart\">This is where the awesome happens</h2>\n   ...`,\n})\nexport class MyComponent {\n}\n```\n\n### Directive API\n\nAdditional attributes may be set on an DOM element using the `pageScroll` directive for customization.\nThey take precedence over the default settings specified in `PageScrollConfig` class. Thereby it is \npossible to have all page scroll-animations last e.g. 2 seconds, but a specific one should be performed with a custom easing function and a duration \nof only 1 second.\n\n#### PageScroll properties\n\n| Attribute                 | Type        | Default      | Description   |\n| ------------------------- | ----------- | ------------ |-------------- |\n| `pageScroll`              |             |              | Attribute adding scroll-animation behavior when the `click`-event happens on the element.\n| `pageScrollTarget`        | string      |              | Optional attribute to set the element that should be scrolled to. Takes precedence over the ´href´-value\n| `pageScrollHorizontal`    | boolean     | false        | Whether the scroll should happen in vertical direction (`false`, default) or horizontal (`true`).\n| `pageScrollOffset`        | number      | 0            | Pixels to offset from the top of the element when scrolling to (positive value = scrolling will stop given pixels atop the target element).\n| `pageScrollDuration`      | number      | 1250         | Duration in milliseconds the whole scroll-animation should last.\n| `pageScrollSpeed`         | number      | -            | Speed in Pixel/Second the animation should take. Only applied if no duration is set. \n| `pageScrollInterruptible` | boolean     | true         | Whether the scroll animation should stop if the user interferes with it (`true`) or not (`false`).\n| `pageScrollAdjustHash`    | boolean     | false        | Whether the [routes hash/fragment](https://angular.io/docs/ts/latest/guide/router.html#!#query-parameters) should be updated to reflect to section that has been scrolled to\n| `pageScrollEasing`        | EasingLogic | linearEasing | Easing method to be used while calculating the scroll position over time (default is linear easing).\n\n#### PageScroll events\n\n| Event                 | Type    | Description   |\n| --------------------- | ------- | ------------- |\n| `pageScrollFinish`    | boolean | Fired when the scroll-animation stops. Emits a boolean value which indicates whether the scroll animation finished successfully and reached its target (`true`) or not (`false`). Possible reasons for false: target not found or interrupted due to another scroll animation starting or user interaction.\n\n#### Example\n\nThe following example will check whether the route _Home_ is currently loaded. \nIf this is true, the scroll-animation will be performed with the default \nproperties. If a different route is loaded, a subscription for route changes \nwill be made and the scroll-animation will be performed as soon as the new \nroute is loaded.\n\n```html\n <a pageScroll [routerLink]=\"['Home']\" href=\"#myanchor\">Go there</a>\n```\n\nOverriding all possible properties. `doSmth()` and `myEasing` are \ndefined in the component\n\n```html\n <a pageScroll [pageScrollOffset]=\"0\" [pageScrollDuration]=\"2000\" [pageScrollEasing]=\"myEasing\" [pageScrollInterruptible]=\"false\" (pageScrollFinish)=\"doSmth($event)\" href=\"#theanchor\">Visit</a>\n```\n\n```typescript\n    public myEasing: EasingLogic = (t: number, b: number, c: number, d: number): number => {\n      // easeInOutExpo easing\n      if (t === 0) {\n        return b;\n      }\n      if (t === d) {\n        return b + c;\n      }\n      if ((t /= d / 2) < 1) {\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n      }\n  \n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n\n    doSmth(reachedTarget: boolean): void {\n        if (reachedTarget) {\n            console.log('Yeah, we reached our destination');\n        } else {\n            console.log('Ohoh, something interrupted us');\n        }\n    }\n```\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Nolanus/ngx-page-scroll.git"
  },
  "sideEffects": false,
  "typings": "ngx-page-scroll.d.ts",
  "version": "6.0.2"
}
